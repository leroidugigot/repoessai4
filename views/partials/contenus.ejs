<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Formations</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <link rel="stylesheet" href="/public/css/contenus.css" />
  </head>
  <body>
    <nav class="navigation">
      <button class="nav-button" onclick="window.location.reload()">
        <i class="fas fa-home"></i> Accueil
      </button>
      <div class="breadcrumb"></div>
    </nav>

    <div class="container">
      <div id="formationList" class="hidden">
        <!-- Liste des formations -->
      </div>

      <div id="moduleList" class="hidden">
        <!-- Liste des modules -->
      </div>

      <div id="contentDisplay" class="hidden">
        <!-- Contenu -->
      </div>
    </div>
    <script>
      // Security Utils
      const SecurityUtils = {
        escapeHtml(unsafe) {
          return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
        },

        validateId(id) {
          return /^[a-zA-Z0-9-_]+$/.test(id);
        },

        validateYoutubeUrl(url) {
          const youtubeRegex =
            /^(https?:\/\/)?(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)[\w-]{11}$/;
          return youtubeRegex.test(url);
        },

        getCsrfToken() {
          return document
            .querySelector('meta[name="csrf-token"]')
            ?.getAttribute("content");
        },

        getHeaders() {
          return {
            "Content-Type": "application/json",
            "X-CSRF-Token": this.getCsrfToken(),
          };
        },
      };

      // Rate Limiter
      const RateLimiter = {
        limits: {},

        canPerformAction(action, minInterval = 1000) {
          const now = Date.now();
          if (this.limits[action] && now - this.limits[action] < minInterval) {
            return false;
          }
          this.limits[action] = now;
          return true;
        },
      };

      window.SecurityUtils = SecurityUtils;
      window.RateLimiter = RateLimiter;

      // API Client
      const ApiClient = {
        async fetchWithSecurity(url, options = {}) {
          try {
            const response = await fetch(url, {
              ...options,
              headers: {
                ...SecurityUtils.getHeaders(),
                ...options.headers,
              },
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.message || "Une erreur est survenue");
            }

            return await response.json();
          } catch (error) {
            console.error("API Error:", error);
            throw error;
          }
        },

        async getFormations() {
          return this.fetchWithSecurity("/formations");
        },

        async getFormation(id) {
          if (!SecurityUtils.validateId(id)) throw new Error("ID invalide");
          return this.fetchWithSecurity(`/formations/${id}`);
        },

        async getModules(formationId) {
          if (!SecurityUtils.validateId(formationId))
            throw new Error("ID invalide");
          return this.fetchWithSecurity(`/formations/${formationId}/modules`);
        },

        async saveProgress(formationId, moduleId, progressData) {
          if (
            !SecurityUtils.validateId(formationId) ||
            !SecurityUtils.validateId(moduleId)
          ) {
            throw new Error("ID invalide");
          }

          if (!RateLimiter.canPerformAction(`progress-${moduleId}`)) {
            return;
          }

          return this.fetchWithSecurity(
            `/formations/${formationId}/modules/${moduleId}/progress`,
            {
              method: "POST",
              body: JSON.stringify(progressData),
              headers: {
                "Content-Type": "application/json",
              },
            }
          );
        },
      };

      // Progress Tracker
      const ProgressTracker = {
        currentFormationName: null,
        state: {
          videoProgress: 0,
          readingTime: 0,
          quizScore: 0,
          conditions: {
            videoWatched: false,
            timeSpentReading: false,
            quizPassed: false,
          },
        },

        readingInterval: null,

        async saveProgress(type, value) {
          try {
            const validTypes = ["video", "quiz", "reading"];
            if (!validTypes.includes(type)) {
              throw new Error("Type de progression invalide");
            }

            if (typeof value !== "number" || value < 0) {
              throw new Error("Valeur de progression invalide");
            }

            if ((type === "video" || type === "quiz") && value > 100) {
              value = 100;
            }

            this.state[`${type}Progress`] = value;

            // Mise à jour des conditions selon le type
            switch (type) {
              case "video":
                this.state.conditions.videoWatched = value >= 70;
                break;
              case "reading":
                this.state.conditions.timeSpentReading = value >= 30;
                break;
              case "quiz":
                this.state.conditions.quizPassed = value === 100;
                break;
            }

            const allConditionsMet = Object.values(this.state.conditions).every(
              (condition) => condition
            );

            // Sauvegarde côté serveur
            const response = await ApiClient.saveProgress(
              window.currentFormationId,
              window.currentModuleId,
              {
                type,
                value,
                completed: allConditionsMet,
              }
            );

            // Mise à jour de l'interface
            UI.updateProgressUI(this.state);

            if (allConditionsMet) {
              await this.updateModuleVisuals();
              // Rediriger vers la liste des modules si toutes les conditions sont remplies
              setTimeout(() => {
                loadModules(window.currentFormationId, currentFormation);
              }, 1000);
            }

            return response;
          } catch (error) {
            console.error(
              "Erreur lors de la sauvegarde de la progression:",
              error
            );
            throw error;
          }
        },



        updateState(progress) {
          if (progress.videoWatched) this.state.conditions.videoWatched = true;
          if (progress.timeSpentReading)
            this.state.conditions.timeSpentReading = true;
          if (progress.quiz?.success) this.state.conditions.quizPassed = true;
        },

        async updateModuleVisuals() {
          const moduleItems = document.querySelectorAll(".module-item");

          for (const item of moduleItems) {
            const moduleId = item.dataset.moduleId;
            const statusIcon = item.querySelector(".status-icon i");

            try {
              const status = await ApiClient.fetchWithSecurity(
                `/formations/${window.currentFormationId}/modules/${moduleId}/status`
              );

              if (status.completed) {
                statusIcon.className = "fas fa-check-circle text-green-500";
                item.classList.add("completed");
              } else if (status.isLocked) {
                statusIcon.className = "fas fa-lock text-red-500";
                item.classList.add("locked");
                item.style.pointerEvents = "none";
                item.style.opacity = "0.6";
              } else {
                statusIcon.className = "fas fa-circle text-gray-300";
                item.classList.remove("completed", "locked");
                item.style.pointerEvents = "auto";
                item.style.opacity = "1";
              }
            } catch (error) {
              console.error("Erreur lors de la mise à jour du statut:", error);
            }
          }
        },

        startReadingTracking() {
          this.stopReadingTracking();

          const startTime = Date.now() - this.state.readingTime * 1000;
          this.readingInterval = setInterval(async () => {
            this.state.readingTime = Math.floor(
              (Date.now() - startTime) / 1000
            );
            if (this.state.readingTime >= 180) {
              this.state.conditions.timeSpentReading = true;
              await this.saveProgress("reading", this.state.readingTime);
            }
            UI.updateProgressUI(this.state);
          }, 1000);
        },

        stopReadingTracking() {
          if (this.readingInterval) {
            clearInterval(this.readingInterval);
            this.readingInterval = null;
          }
        },
        initializeVideoTracking(videoElement) {
          if (!videoElement?.src.includes("youtube")) return;

          let progressInterval = null;
          let player = null;

          return new YT.Player(videoElement, {
            events: {
              onReady: (event) => {
                player = event.target;
              },
              onStateChange: (event) => {
                // Démarrer le suivi lorsque la vidéo commence à jouer
                if (event.data === YT.PlayerState.PLAYING && player) {
                  // Nettoyer l'ancien interval s'il existe
                  if (progressInterval) {
                    clearInterval(progressInterval);
                  }

                  progressInterval = setInterval(async () => {
                    try {
                      const duration = player.getDuration();
                      const currentTime = player.getCurrentTime();

                      // Vérifier que la durée est valide
                      if (duration && duration > 0) {
                        const progress = Math.min(
                          Math.round((currentTime / duration) * 100),
                          100
                        );

                        this.state.videoProgress = progress;

                        // Sauvegarder la progression si le seuil est atteint
                        if (
                          progress >= 70 &&
                          !this.state.conditions.videoWatched
                        ) {
                          this.state.conditions.videoWatched = true;
                          try {
                            await this.saveProgress("video", progress);
                            console.log(
                              "Progression vidéo sauvegardée:",
                              progress
                            );
                          } catch (error) {
                            console.error(
                              "Erreur lors de la sauvegarde de la progression vidéo:",
                              error
                            );
                          }
                        }

                        UI.updateProgressUI(this.state);
                      }
                    } catch (error) {
                      console.error("Erreur lors du suivi vidéo:", error);
                      if (progressInterval) {
                        clearInterval(progressInterval);
                      }
                    }
                  }, 1000);
                }
                // Arrêter le suivi lorsque la vidéo est en pause ou terminée
                else if (
                  progressInterval &&
                  (event.data === YT.PlayerState.PAUSED ||
                    event.data === YT.PlayerState.ENDED)
                ) {
                  clearInterval(progressInterval);
                  progressInterval = null;
                }
              },
            },
          });
        },
      };

      // UI Manager
      const UI = {
        elements: {
          contentDisplay: document.getElementById("contentDisplay"),
          moduleList: document.getElementById("moduleList"),
          formationList: document.getElementById("formationList"),
          breadcrumb: document.querySelector(".breadcrumb"),
          navbarHidden: document.getElementById("navbarHidden"),
        },

        showLoading(element) {
          if (!element) return;
          element.innerHTML = `
                  <div class="loading-animation">
                      <div class="spinner"></div>
                  </div>
              `;
        },

        updateProgressUI(state) {
          const progressHtml = `
                  <div class="progress-status mb-4 p-4 bg-gray-100 rounded-lg">
                      <h3 class="font-bold mb-2">Progression du module</h3>
                      <div class="grid gap-2">
                          <div class="flex items-center gap-2">
                              <i class="fas ${
                                state.conditions.videoWatched
                                  ? "fa-check-circle text-green-500"
                                  : "fa-circle text-gray-300"
                              }"></i>
                              <span>Vidéo (${Math.round(
                                state.videoProgress
                              )}% / 70% requis)</span>
                          </div>
                          <div class="flex items-center gap-2">
                              <i class="fas ${
                                state.conditions.timeSpentReading
                                  ? "fa-check-circle text-green-500"
                                  : "fa-circle text-gray-300"
                              }"></i>
                              <span>Lecture (${Math.floor(
                                state.readingTime / 60
                              )}:${String(state.readingTime % 60).padStart(
            2,
            "0"
          )} / 3:00)</span>
                          </div>
                          <div class="flex items-center gap-2">
                              <i class="fas ${
                                state.conditions.quizPassed
                                  ? "fa-check-circle text-green-500"
                                  : "fa-circle text-gray-300"
                              }"></i>
                              <span>Quiz (${
                                state.quizScore
                              }% / 100% requis)</span>
                          </div>
                      </div>
                  </div>`;

          const contentHeader = document.querySelector(".content-header");
          if (contentHeader) {
            let progressStatus = document.querySelector(".progress-status");
            if (progressStatus) {
              progressStatus.remove();
            }
            contentHeader.insertAdjacentHTML("afterend", progressHtml);
          }

          // Vérifier si toutes les conditions sont remplies
          const allConditionsMet = Object.values(state.conditions).every(
            (condition) => condition
          );
          const nextButton = document.querySelector(".next-module-btn");
          if (nextButton) {
            nextButton.disabled = !allConditionsMet;
          }
        },

        handleError(element, error) {
          if (!element) return;
          console.error("Error:", error);
          element.innerHTML = `
                  <div class="error-message">
                      <i class="fas fa-exclamation-circle"></i>
                      <span>${SecurityUtils.escapeHtml(
                        error.message || "Une erreur est survenue"
                      )}</span>
                  </div>
              `;
        },
      };

      document.addEventListener("DOMContentLoaded", function () {
        // State management
        let currentFormation = null;
        let currentModule = null;
        let currentModuleContent = null;
        window.currentFormationId = null;
        window.currentModuleId = null;

        window.loadFormations = async function () {
          const formationList = document.getElementById("formationList");
          if (!formationList) return;

          UI.showLoading(formationList);
          formationList.classList.remove("hidden");

          const moduleList = document.getElementById("moduleList");
          const contentDisplay = document.getElementById("contentDisplay");

          if (moduleList) moduleList.classList.add("hidden");
          if (contentDisplay) contentDisplay.classList.add("hidden");
          if (UI.elements.navbarHidden)
            UI.elements.navbarHidden.style.display = "none";

          currentFormation = null;
          currentModule = null;
          window.currentFormationId = null;
          window.currentModuleId = null;
          updateBreadcrumb();

          try {
            const formations = await ApiClient.getFormations();
            formationList.innerHTML = formations
              .map(
                (formation) => `
                      <div class="formation-item fade-in" onclick="loadFormationDescription('${formation._id}', '${formation.nom}')">
                          <div class="icon-container">
                              <i class="fas fa-graduation-cap"></i>
                          </div>
                          <div class="formation-content">
                              <h3>${formation.nom}</h3>
                          </div>
                      </div>
                  `
              )
              .join("");
          } catch (error) {
            UI.handleError(formationList, error);
          }
        };

        window.loadFormationDescription = async function (id, name) {
          const formationList = document.getElementById("formationList");
          if (!formationList) return;

          UI.showLoading(formationList);
          currentFormation = name;
          window.currentFormationId = id;
          updateBreadcrumb();

          try {
            const formation = await ApiClient.getFormation(id);
            formationList.innerHTML = `
                      <div class="formation-item fade-in">
                          <div class="icon-container">
                              <i class="fas fa-graduation-cap"></i>
                          </div>
                          <div class="formation-content">
                              <h3>${formation.nom}</h3>
                              <p class="formation-description">${
                                formation.description ||
                                "Aucune description disponible"
                              }</p>
                              <button class="btn-inscription" onclick="inscrireAFormation('${
                                formation._id
                              }', '${formation.nom}')">
                                  S'inscrire
                              </button>
                          </div>
                      </div>
                  `;
          } catch (error) {
            UI.handleError(formationList, error);
          }
        };

        window.inscrireAFormation = async function (id, name) {
          try {
            const response = await fetch(`/formations/${id}/inscription`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({}),
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.message);
            }

            const data = await response.json();
            alert(data.message);
            loadModules(id, name);
          } catch (error) {
            console.error("Erreur lors de l'inscription:", error);
            alert("Erreur lors de l'inscription : " + error.message);
          }
        };

        window.loadModules = async function (id, name) {
          console.log(`loadModules called with id: ${id}, name: ${name}`);
          const moduleList = document.getElementById("moduleList");
          if (!moduleList) return;

          UI.showLoading(moduleList);
          moduleList.classList.remove("hidden");

          const formationList = document.getElementById("formationList");
          if (formationList) formationList.classList.add("hidden");

          currentFormation = name;
          window.currentFormationId = id;
          currentModule = null;
          window.currentModuleId = null;
          updateBreadcrumb();

          try {
            const [modules, progression] = await Promise.all([
              ApiClient.getModules(id),
              ApiClient.fetchWithSecurity(`/formations/${id}/progression`),
            ]);

            moduleList.innerHTML = modules
              .map(
                (module) => `
                      <div class="module-item fade-in" 
                           data-module-id="${module._id}"
                           onclick="loadContent('${id}', '${module._id}', '${
                  module.nom
                }')">
                          <div class="icon-container">
                              <i class="fas fa-book"></i>
                          </div>
                          <div class="module-content">
                              <h3>${module.nom}</h3>
                              <p class="module-description">${
                                module.description ||
                                "Aucune description disponible"
                              }</p>
                              <div class="status-icon">
                                  <i class="fas fa-circle"></i>
                              </div>
                              <div class="quiz-score"></div>
                          </div>
                      </div>`
              )
              .join("");

            await ProgressTracker.updateModuleVisuals();
          } catch (error) {
            console.error("Erreur lors du chargement:", error);
            UI.handleError(moduleList, error);
          }
        };

        window.loadContent = async function (fId, mId, mName) {

          ProgressTracker.currentFormationName = currentFormation;

          console.log(
            `loadContent called with fId: ${fId}, mId: ${mId}, mName: ${mName}`
          );
          const contentDisplay = document.getElementById("contentDisplay");
          if (!contentDisplay) return;

          UI.showLoading(contentDisplay);
          contentDisplay.classList.remove("hidden");

          const moduleList = document.getElementById("moduleList");
          if (moduleList) moduleList.classList.add("hidden");

          currentModule = mName;
          window.currentModuleId = mId;
          window.currentFormationId = fId;
          window.currentFormation = currentFormation; // Ajouter cette ligne
          updateBreadcrumb();

          if (UI.elements.navbarHidden)
            UI.elements.navbarHidden.style.display = "block";

          if (status.completed) {
            ProgressTracker.state = {
              videoProgress: 100,
              readingTime: 30,
              quizScore: 100,
              conditions: {
                videoWatched: true,
                timeSpentReading: true,
                quizPassed: true,
              },
            };
          } else {
            ProgressTracker.state = {
              videoProgress: status.videoProgress || 0,
              readingTime: status.readingTime || 0,
              quizScore: status.quizStatus?.score || 0,
              conditions: {
                videoWatched: status.videoWatched || false,
                timeSpentReading: status.timeSpentReading || false,
                quizPassed: status.quizStatus?.passed || false,
              },
            };
          }

          try {
            const [content, status] = await Promise.all([
              ApiClient.fetchWithSecurity(
                `/formations/${fId}/modules/${mId}/content`
              ),
              ApiClient.fetchWithSecurity(
                `/formations/${fId}/modules/${mId}/status`
              ),
            ]);

            currentModuleContent = content;

            // Si le module est verrouillé, afficher un message et empêcher l'accès
            if (status.isLocked) {
              contentDisplay.innerHTML = `
                    <div class="content-header fade-in">
                        <h2>${currentModule}</h2>
                    </div>
                    <div class="content-body fade-in">
                        <div class="locked-message">
                            <i class="fas fa-lock text-red-500 text-4xl mb-4"></i>
                            <p>Ce module est verrouillé. Veuillez compléter les modules précédents.</p>
                        </div>
                    </div>`;
              return;
            }

            // Reprendre la progression sauvegardée si elle existe
            if (status.completed) {
              ProgressTracker.state.conditions = {
                videoWatched: true,
                timeSpentReading: true,
                quizPassed: true,
              };
            } else {
              ProgressTracker.state.conditions = {
                videoWatched: status.videoWatched || false,
                timeSpentReading: status.timeSpentReading || false,
                quizPassed: status.quizStatus?.success || false,
              };
            }

            // Afficher la vidéo si elle existe
            if (content.video) {
              let videoId = "";
              const videoUrl = content.video.trim();

              if (videoUrl.includes("youtube.com/watch")) {
                videoId = videoUrl.split("v=")[1]?.split("&")[0];
              } else if (videoUrl.includes("youtu.be")) {
                videoId = videoUrl.split("youtu.be/")[1]?.split("?")[0];
              }

              if (videoId) {
                contentDisplay.innerHTML = `
                        <div class="content-header fade-in">
                            <h2>Vidéo: ${currentModule}</h2>
                        </div>
                        <div class="content-body fade-in">
                            <div class="video-container">
                                <iframe 
                                    id="player"
                                    src="https://www.youtube.com/embed/${videoId}?enablejsapi=1" 
                                    frameborder="0" 
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                                    allowfullscreen>
                                </iframe>
                            </div>
                            <button class="next-module-btn mt-4 px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
                                    ${
                                      !ProgressTracker.state.conditions
                                        .videoWatched
                                        ? "disabled"
                                        : ""
                                    }
                                    onclick="loadModules('${fId}', '${currentFormation}')">
                                Module Suivant
                            </button>
                        </div>`;

                const iframe = contentDisplay.querySelector("iframe");
                ProgressTracker.initializeVideoTracking(iframe);
              }
            } else {
              // Afficher le contenu normal
              contentDisplay.innerHTML = `
                    <div class="content-header fade-in">
                        <h2>${currentModule}</h2>
                    </div>
                    <div class="content-body fade-in">
                        <p class="content-description">${
                          content.description || ""
                        }</p>
                        <div class="module-content w-full">
                            ${content.course || ""}
                        </div>
                        <button class="next-module-btn mt-4 px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
                                ${
                                  !Object.values(
                                    ProgressTracker.state.conditions
                                  ).every(Boolean)
                                    ? "disabled"
                                    : ""
                                }
                                onclick="loadModules('${fId}', '${currentFormation}')">
                            Module Suivant
                        </button>
                    </div>`;

              ProgressTracker.startReadingTracking();
            }

            UI.updateProgressUI(ProgressTracker.state);
          } catch (error) {
            UI.handleError(contentDisplay, error);
          }
        };

        window.renderQuizModal = function (quizData) {
          if (!Array.isArray(quizData)) {
            console.error("Format de quiz invalide");
            return;
          }

          const modalHtml = `
            <div id="quiz-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
                <div class="bg-white p-6 rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
                    <div class="content-header">
                        <h2>Quiz: ${currentModule}</h2>
                    </div>
                    <form id="quiz-form">
                        ${quizData
                          .map(
                            (question, index) => `
                            <div class="quiz-question mb-4 p-4 bg-gray-100 rounded-lg">
                                <h3 class="font-bold mb-2">${
                                  question.question
                                }</h3>
                                <div class="quiz-options">
                                    ${question.options
                                      .map(
                                        (option) => `
                                        <label class="block mb-2">
                                            <input type="radio" 
                                                   name="question-${index}" 
                                                   value="${option}" 
                                                   data-correct="${
                                                     question.answer === option
                                                   }"
                                                   required
                                                   class="mr-2 quiz-option">
                                            ${option}
                                        </label>
                                    `
                                      )
                                      .join("")}
                                </div>
                            </div>
                        `
                          )
                          .join("")}
                        <div class="flex justify-between">
                            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                Soumettre le Quiz
                            </button>
                            <button type="button" onclick="closeQuizModal()" 
                                    class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400">
                                Fermer
                            </button>
                        </div>
                    </form>
                    <div id="quiz-result" class="mt-4 text-center"></div>
                </div>
            </div>`;

          const existingModal = document.getElementById("quiz-modal");
          if (existingModal) {
            existingModal.remove();
          }

          document.body.insertAdjacentHTML("beforeend", modalHtml);

          const quizForm = document.getElementById("quiz-form");
          if (quizForm) {
            quizForm.addEventListener("submit", async function (e) {
              e.preventDefault();
              const resultDiv = document.getElementById("quiz-result");
              if (!resultDiv) return;

              let correctAnswers = 0;
              const totalQuestions = quizData.length;

              const radioGroups = document.querySelectorAll(
                'input[type="radio"]:checked'
              );
              if (radioGroups.length !== totalQuestions) {
                alert("Veuillez répondre à toutes les questions");
                return;
              }

              radioGroups.forEach((radio) => {
                if (radio.getAttribute("data-correct") === "true") {
                  correctAnswers++;
                }
              });

              const score = Math.round((correctAnswers / totalQuestions) * 100);

              try {
                await ProgressTracker.saveProgress("quiz", score);

                resultDiv.innerHTML = `
                        <p class="font-bold text-lg">
                            Votre score : ${correctAnswers}/${totalQuestions} (${score}%)
                        </p>
                        <p class="${
                          score === 100 ? "text-green-600" : "text-red-600"
                        }">
                            ${
                              score === 100
                                ? "Félicitations ! Quiz réussi !"
                                : "Vous devez obtenir 100% pour valider le module"
                            }
                        </p>`;

                if (score === 100) {
                  setTimeout(() => {
                    closeQuizModal();
                    loadModules(window.currentFormationId, currentFormation);
                  }, 2000);
                }
              } catch (error) {
                console.error("Erreur lors de la sauvegarde du score:", error);
                resultDiv.innerHTML = `
                        <p class="text-red-600">
                            Erreur lors de la sauvegarde du score. Veuillez réessayer.
                        </p>`;
              }
            });
          }
        };

        window.closeQuizModal = function () {
          const modal = document.getElementById("quiz-modal");
          if (modal) {
            modal.remove();
          }
        };

        function updateBreadcrumb() {
          const breadcrumb = document.querySelector(".breadcrumb");
          if (!breadcrumb) return;

          let html = "";
          if (currentFormation) {
            html += `
                <span class="breadcrumb-item cursor-pointer" onclick="loadFormations()">
                    ${currentFormation}
                </span>`;

            if (currentModule) {
              html += `
                    <span class="breadcrumb-separator">
                        <i class="fas fa-chevron-right"></i>
                    </span>
                    <span class="breadcrumb-item">
                        ${currentModule}
                    </span>`;
            }
          }
          breadcrumb.innerHTML = html;
        }

        // Event Listeners pour la navigation
        const videoLink = document.querySelector('a[href="/videos"]');
        const coursLink = document.querySelector('a[href="/cours"]');
        const quizLink = document.querySelector('a[href="/quiz"]');
        const nextLink = document.querySelector('a[href="/next"]');

        if (videoLink) {
          videoLink.addEventListener("click", async function (e) {
            e.preventDefault();
            if (!currentModuleContent?.video) {
              alert("Aucune vidéo disponible pour ce module");
              return;
            }

            ProgressTracker.stopReadingTracking();
            await loadContent(
              window.currentFormationId,
              window.currentModuleId,
              currentModule
            );
          });
        }

        if (coursLink) {
          coursLink.addEventListener("click", async function (e) {
            e.preventDefault();
            if (!currentModuleContent) return;

            const contentDisplay = document.getElementById("contentDisplay");
            if (!contentDisplay) return;

            contentDisplay.innerHTML = `
                <div class="content-header fade-in">
                    <h2>Cours: ${currentModule}</h2>
                </div>
                <div class="content-body fade-in">
                    <div class="course-container">
                        ${
                          currentModuleContent.cours ||
                          currentModuleContent.description ||
                          "Aucun cours disponible"
                        }
                    </div>
                </div>`;

            ProgressTracker.stopReadingTracking();
            ProgressTracker.startReadingTracking();
          });
        }

        if (quizLink) {
          quizLink.addEventListener("click", function (e) {
            e.preventDefault();
            if (!currentModuleContent?.quiz) {
              alert("Aucun quiz disponible pour ce module");
              return;
            }
            ProgressTracker.stopReadingTracking();
            renderQuizModal(currentModuleContent.quiz);
          });
        }

        if (nextLink) {
          nextLink.addEventListener("click", async function (e) {
            e.preventDefault();
            if (!window.currentFormationId) {
              alert("Veuillez sélectionner une formation");
              return;
            }

            ProgressTracker.stopReadingTracking();
            await loadModules(window.currentFormationId, currentFormation);
          });
        }

        // Chargement initial
        loadFormations();
      });
    </script>
    <script src="https://www.youtube.com/iframe_api"></script>
  </body>
</html>
