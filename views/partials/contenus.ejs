<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Formations</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <link rel="stylesheet" href="/public/css/contenus.css" />
    <meta name="csrf-token" content="<%- locals.csrfToken %>" />
  </head>
  <body>
    <nav class="navigation">
      <button class="nav-button" onclick="window.location.reload()">
        <i class="fas fa-home"></i> Accueil
      </button>
      <div class="breadcrumb"></div>
    </nav>

    <div class="container">
      <div id="formationList" class="hidden">
        <!-- Liste des formations -->
      </div>

      <div id="moduleList" class="hidden">
        <!-- Liste des modules -->
      </div>

      <div id="contentDisplay" class="hidden">
        <!-- Contenu -->
      </div>
    </div>
    <script>
      // Security Utils
      const SecurityUtils = {
        escapeHtml(unsafe) {
          return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
        },

        validateId(id) {
          return /^[a-zA-Z0-9-_]+$/.test(id);
        },

        validateYoutubeUrl(url) {
          const youtubeRegex =
            /^(https?:\/\/)?(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)[\w-]{11}$/;
          return youtubeRegex.test(url);
        },

        getCsrfToken() {
          return document
            .querySelector('meta[name="csrf-token"]')
            ?.getAttribute("content");
        },

        getHeaders() {
          return {
            "Content-Type": "application/json",
            "X-CSRF-Token": this.getCsrfToken(),
          };
        },
      };

      // Rate Limiter
      const RateLimiter = {
        limits: {},

        canPerformAction(action, minInterval = 1000) {
          const now = Date.now();
          if (this.limits[action] && now - this.limits[action] < minInterval) {
            return false;
          }
          this.limits[action] = now;
          return true;
        },
      };

      window.SecurityUtils = SecurityUtils;
      window.RateLimiter = RateLimiter;

      // API Client
      const ApiClient = {
        async fetchWithSecurity(url, options = {}) {
          try {
            const response = await fetch(url, {
              ...options,
              headers: {
                ...SecurityUtils.getHeaders(),
                ...options.headers,
              },
              credentials: "include", // Important pour les cookies d'authentification
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.message || "Une erreur est survenue");
            }

            return await response.json();
          } catch (error) {
            console.error("API Error:", error);
            throw error;
          }
        },

        async getFormations() {
          return this.fetchWithSecurity("/formations");
        },

        async getFormation(id) {
          if (!SecurityUtils.validateId(id)) throw new Error("ID invalide");
          return this.fetchWithSecurity(`/formations/${id}`);
        },

        async getModules(formationId) {
          if (!SecurityUtils.validateId(formationId))
            throw new Error("ID invalide");
          return this.fetchWithSecurity(`/formations/${formationId}/modules`);
        },

        async getModuleContent(formationId, moduleId) {
          if (
            !SecurityUtils.validateId(formationId) ||
            !SecurityUtils.validateId(moduleId)
          ) {
            throw new Error("ID invalide");
          }
          return this.fetchWithSecurity(
            `/formations/${formationId}/modules/${moduleId}/content`
          );
        },

        async getModuleStatus(formationId, moduleId) {
          if (
            !SecurityUtils.validateId(formationId) ||
            !SecurityUtils.validateId(moduleId)
          ) {
            throw new Error("ID invalide");
          }
          return this.fetchWithSecurity(
            `/formations/${formationId}/modules/${moduleId}/status`
          );
        },

        async saveProgress(formationId, moduleId, progressData) {
          if (!formationId || !moduleId || !progressData) {
            throw new Error(
              "Paramètres manquants pour la sauvegarde de la progression"
            );
          }

          if (
            !SecurityUtils.validateId(formationId) ||
            !SecurityUtils.validateId(moduleId)
          ) {
            throw new Error("ID de formation ou de module invalide");
          }

          if (
            !progressData.type ||
            !["video", "reading", "quiz"].includes(progressData.type)
          ) {
            throw new Error("Type de progression invalide");
          }

          if (typeof progressData.value !== "number") {
            throw new Error("Valeur de progression invalide");
          }

          return this.fetchWithSecurity(
            `/formations/${formationId}/modules/${moduleId}/progress`,
            {
              method: "POST",
              body: JSON.stringify(progressData),
              headers: {
                "Content-Type": "application/json",
              },
            }
          );
        },

        async inscrireFormation(formationId) {
          if (!SecurityUtils.validateId(formationId)) {
            throw new Error("ID invalide");
          }

          return this.fetchWithSecurity(
            `/formations/${formationId}/inscription`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            }
          );
        },

        async getProgression(formationId) {
          if (!SecurityUtils.validateId(formationId)) {
            throw new Error("ID invalide");
          }
          return this.fetchWithSecurity(
            `/formations/${formationId}/progression`
          );
        },

        async getNextModule(formationId, currentModuleId) {
          if (
            !SecurityUtils.validateId(formationId) ||
            !SecurityUtils.validateId(currentModuleId)
          ) {
            throw new Error("ID invalide");
          }
          return this.fetchWithSecurity(
            `/formations/${formationId}/modules/${currentModuleId}/next`
          );
        },
      };

      // Progress Tracker
      const ProgressTracker = {
        state: null,
        videoInterval: null,
        readingInterval: null,

        async initializeState(formationId, moduleId) {
          try {
            const response = await ApiClient.fetchWithSecurity(
              `/api/content/${formationId}/modules/${moduleId}/state`
            );
            this.state = response.state;
            if (window.updateChapterProgress) {
              window.updateChapterProgress(this.state);
            }
          } catch (error) {
            console.error("Erreur lors de l'initialisation de l'état:", error);
          }
        },

        async saveProgress(type, value) {
          try {
            if (!window.currentFormationId || !window.currentModuleId) {
              console.error("Formation ID ou Module ID manquant");
              throw new Error(
                "Impossible de sauvegarder la progression : Formation ou Module non sélectionné"
              );
            }

            const progressData = { type, value };
            const response = await ApiClient.saveProgress(
              window.currentFormationId,
              window.currentModuleId,
              progressData
            );

            // Mise à jour de l'état local en fonction du type
            switch (type) {
              case "video":
                this.state.videoProgress = value;
                this.state.conditions.videoWatched = value >= 70;
                break;
              case "reading":
                this.state.readingTime = value;
                this.state.conditions.timeSpentReading = value >= 180;
                break;
              case "quiz":
                this.state.quizScore = value;
                this.state.conditions.quizPassed = value === 100;
                break;
            }

            if (window.updateChapterProgress) {
              window.updateChapterProgress(this.state);
            }

            return response;
          } catch (error) {
            console.error(
              "Erreur lors de la sauvegarde de la progression:",
              error
            );
            throw error;
          }
        },

        initializeVideoTracking(iframe) {
          if (this.videoInterval) {
            clearInterval(this.videoInterval);
            this.videoInterval = null;
          }

          let player;
          let lastProgress = 0;

          window.onYouTubeIframeAPIReady = () => {
            player = new YT.Player(iframe, {
              events: {
                onStateChange: async (event) => {
                  if (event.data === YT.PlayerState.PLAYING) {
                    if (!this.videoInterval) {
                      this.videoInterval = setInterval(async () => {
                        try {
                          const duration = player.getDuration();
                          const currentTime = player.getCurrentTime();

                          if (duration && duration > 0) {
                            const progress = Math.min(
                              Math.round((currentTime / duration) * 100),
                              100
                            );

                            if (Math.abs(progress - lastProgress) >= 5) {
                              lastProgress = progress;
                              await this.saveProgress("video", progress);
                            }
                          }
                        } catch (error) {
                          console.error("Erreur lors du suivi vidéo:", error);
                          if (this.videoInterval) {
                            clearInterval(this.videoInterval);
                            this.videoInterval = null;
                          }
                        }
                      }, 2000);
                    }
                  } else if (
                    this.videoInterval &&
                    (event.data === YT.PlayerState.PAUSED ||
                      event.data === YT.PlayerState.ENDED)
                  ) {
                    clearInterval(this.videoInterval);
                    this.videoInterval = null;
                  }
                },
              },
            });
          };

          if (!window.YT) {
            const tag = document.createElement("script");
            tag.src = "https://www.youtube.com/iframe_api";
            const firstScriptTag = document.getElementsByTagName("script")[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
          } else if (window.YT.Player) {
            window.onYouTubeIframeAPIReady();
          }

          const cleanup = () => {
            if (this.videoInterval) {
              clearInterval(this.videoInterval);
              this.videoInterval = null;
            }
          };

          window.addEventListener("beforeunload", cleanup);
          const contentDisplay = document.getElementById("contentDisplay");
          if (contentDisplay) {
            contentDisplay.addEventListener("DOMNodeRemoved", cleanup, {
              once: true,
            });
          }
        },

        startReadingTracking() {
          if (this.readingInterval) {
            clearInterval(this.readingInterval);
            this.readingInterval = null;
          }

          const contentBody = document.querySelector(".content-body");
          if (!contentBody) return;

          const startTime = Date.now() - (this.state?.readingTime || 0) * 1000;
          this.readingInterval = setInterval(async () => {
            const currentTime = Math.floor((Date.now() - startTime) / 1000);
            await this.saveProgress("reading", currentTime);
          }, 1000);

          contentBody.addEventListener("scroll", async () => {
            const scrollPercentage =
              (contentBody.scrollTop /
                (contentBody.scrollHeight - contentBody.clientHeight)) *
              100;
            if (scrollPercentage > 70) {
              this.state.conditions.timeSpentReading = true;
              if (window.updateChapterProgress) {
                window.updateChapterProgress(this.state);
              }
            }
          });

          const cleanup = () => {
            if (this.readingInterval) {
              clearInterval(this.readingInterval);
              this.readingInterval = null;
            }
          };

          window.addEventListener("beforeunload", cleanup);
          contentBody.addEventListener("DOMNodeRemoved", cleanup, {
            once: true,
          });
        },

        async updateModuleVisuals() {
          try {
            const moduleItems = document.querySelectorAll(".module-item");
            for (const item of moduleItems) {
              const moduleId = item.dataset.moduleId;
              const statusIcon = item.querySelector(".status-icon i");

              if (!moduleId || !statusIcon) continue;

              const [state, lockStatus] = await Promise.all([
                ApiClient.fetchWithSecurity(
                  `/api/content/${window.currentFormationId}/modules/${moduleId}/state`
                ),
                ApiClient.fetchWithSecurity(
                  `/api/content/${window.currentFormationId}/modules/${moduleId}/lock-status`
                ),
              ]);

              if (lockStatus.isLocked) {
                statusIcon.className = "fas fa-lock text-red-500";
                item.classList.add("locked");
                item.style.pointerEvents = "none";
                item.style.opacity = "0.6";
                item.title = lockStatus.message || "Module verrouillé";
              } else {
                const isCompleted =
                  state.conditions.videoWatched &&
                  state.conditions.timeSpentReading &&
                  state.conditions.quizPassed;

                if (isCompleted) {
                  statusIcon.className = "fas fa-check-circle text-green-500";
                  item.classList.add("completed");
                  item.classList.remove("locked");
                  item.style.pointerEvents = "auto";
                  item.style.opacity = "1";
                } else {
                  statusIcon.className = "fas fa-circle text-gray-300";
                  item.classList.remove("completed", "locked");
                  item.style.pointerEvents = "auto";
                  item.style.opacity = "1";
                }
                item.title = "";
              }
            }
          } catch (error) {
            console.error("Erreur lors de la mise à jour des visuels:", error);
          }
        },
      };

      // Rendre ProgressTracker disponible globalement
      window.ProgressTracker = ProgressTracker;

      // UI Manager
      const UI = {
        elements: {
          contentDisplay: document.getElementById("contentDisplay"),
          moduleList: document.getElementById("moduleList"),
          formationList: document.getElementById("formationList"),
          breadcrumb: document.querySelector(".breadcrumb"),
        },

        showLoading(element) {
          if (!element) return;
          element.innerHTML = `
                  <div class="loading-animation">
                      <div class="spinner"></div>
            </div>`;
        },

        updateProgressUI(state) {
          const allConditionsMet = Object.values(state.conditions).every(
            (condition) => condition
          );

          const nextButton = document.querySelector(".next-module-btn");
          if (nextButton) {
            nextButton.disabled = !allConditionsMet;

            if (allConditionsMet) {
              nextButton.classList.remove("opacity-50", "cursor-not-allowed");
              nextButton.classList.add(
                "hover:bg-blue-600",
                "transition-colors"
              );
            } else {
              nextButton.classList.add("opacity-50", "cursor-not-allowed");
              nextButton.classList.remove(
                "hover:bg-blue-600",
                "transition-colors"
              );
            }
          }
        },

        handleError(element, error) {
          if (!element) return;
          console.error("Error:", error);
          element.innerHTML = `
                  <div class="error-message">
                      <i class="fas fa-exclamation-circle"></i>
                      <span>${SecurityUtils.escapeHtml(
                        error.message || "Une erreur est survenue"
                      )}</span>
            </div>`;
        },
      };

      // Rendre UI disponible globalement
      window.UI = UI;

      // Initialisation
      document.addEventListener("DOMContentLoaded", async function () {
        // S'assurer que ProgressTracker est initialisé
        if (!window.ProgressTracker) {
          window.ProgressTracker = ProgressTracker;
        }

        // Réinitialiser l'état si nécessaire
        window.ProgressTracker.state = {
          videoProgress: 0,
          readingTime: 0,
          quizScore: 0,
          conditions: {
            videoWatched: false,
            timeSpentReading: false,
            quizPassed: false,
          },
        };

        let currentFormation = null;
        let currentModule = null;
        let currentModuleContent = null;
        window.currentFormationId = null;
        window.currentModuleId = null;

        // Fonction pour charger les formations
        window.loadFormations = async function () {
          const formationList = document.getElementById("formationList");
          if (!formationList) return;

          UI.showLoading(formationList);
          formationList.classList.remove("hidden");

          const moduleList = document.getElementById("moduleList");
          const contentDisplay = document.getElementById("contentDisplay");

          if (moduleList) moduleList.classList.add("hidden");
          if (contentDisplay) contentDisplay.classList.add("hidden");

          currentFormation = null;
          currentModule = null;
          window.currentFormationId = null;
          window.currentModuleId = null;
          updateBreadcrumb();

          try {
            const formations = await ApiClient.getFormations();
            formationList.innerHTML = formations
              .map(
                (formation) => `
      <div class="formation-item fade-in" onclick="loadFormationDescription('${formation._id}', '${formation.nom}')">
          <div class="icon-container">
              <i class="fas fa-graduation-cap"></i>
          </div>
          <div class="formation-content">
                          <h3 class="bg-gradient-to-r from-blue-600 to-blue-800 rounded-lg p-4 text-3xl font-bold text-white text-center tracking-wide">
                              ${formation.nom}
                          </h3>
          </div>
                  </div>`
              )
              .join("");
          } catch (error) {
            UI.handleError(formationList, error);
          }
        };

        // Fonction pour charger la description d'une formation
        window.loadFormationDescription = async function (id, name) {
          const formationList = document.getElementById("formationList");
          if (!formationList) return;

          UI.showLoading(formationList);
          currentFormation = name;
          window.currentFormationId = id;
          updateBreadcrumb();

          try {
            const formation = await ApiClient.getFormation(id);
            formationList.innerHTML = `
                      <div class="formation-item fade-in">
                          <div class="icon-container">
                              <i class="fas fa-graduation-cap"></i>
                          </div>
                          <div class="formation-content">
                              <h3>${formation.nom}</h3>
                      <p class="formation-description">
                          ${
                            formation.description ||
                            "Aucune description disponible"
                          }
                      </p>
                      <button class="btn-inscription" onclick="inscrireAFormation('${
                        formation._id
                      }', '${formation.nom}')">
                                  S'inscrire à la formation
                              </button>
                          </div>
              </div>`;
          } catch (error) {
            UI.handleError(formationList, error);
          }
        };

        // Fonction pour s'inscrire à une formation
        window.inscrireAFormation = async function (id, name) {
          try {
            const response = await ApiClient.inscrireFormation(id);
            alert(response.message);
            loadModules(id, name);
          } catch (error) {
            console.error("Erreur lors de l'inscription:", error);
            alert("Erreur lors de l'inscription : " + error.message);
          }
        };

        // Fonction pour charger les modules
        window.loadModules = async function (id, name) {
          const moduleList = document.getElementById("moduleList");
          if (!moduleList) return;

          UI.showLoading(moduleList);
          moduleList.classList.remove("hidden");

          const formationList = document.getElementById("formationList");
          const contentDisplay = document.getElementById("contentDisplay");

          if (formationList) formationList.classList.add("hidden");
          if (contentDisplay) {
            contentDisplay.classList.add("hidden");
            contentDisplay.innerHTML = "";
          }

          currentFormation = name;
          window.currentFormationId = id;
          currentModule = null;
          window.currentModuleId = null;
          updateBreadcrumb();

          currentModuleContent = null;

          try {
            const [modules, progression] = await Promise.all([
              ApiClient.getModules(id),
              ApiClient.getProgression(id),
            ]);

            if (!modules || modules.length === 0) {
              moduleList.innerHTML = `
                <div class="module-message fade-in">
                    <p>Aucun module disponible pour cette formation.</p>
                </div>`;
              return;
            }

            moduleList.innerHTML = `
              <div class="modules-container">
                <div class="modules-header">
                  <h2 class="text-2xl font-bold text-white mb-6">${currentFormation}</h2>
                  <p class="text-gray-300 mb-8">Sélectionnez un module pour commencer votre apprentissage</p>
                    </div>
                <div class="modules-grid">
                  ${modules
                    .map((module, index) => {
                      const moduleStatus = progression.find(
                        (p) =>
                          p.module &&
                          p.module.toString() === module._id.toString()
                      ) || {
                        isLocked: index > 0, // Premier module déverrouillé, les autres verrouillés par défaut
                        completed: false,
                        message:
                          index === 0
                            ? "Premier module - Accès autorisé"
                            : "Complétez d'abord le module précédent",
                      };

                      return `
                        <div class="module-card ${
                          moduleStatus.isLocked ? "locked" : ""
                        }" 
                             data-module-id="${module._id}"
                             onclick="${
                               !moduleStatus.isLocked
                                 ? `loadContent('${id}', '${module._id}', '${module.nom}')`
                                 : "void(0)"
                             }">
                          <div class="module-number">Module ${index + 1}</div>
                          ${
                            moduleStatus.isLocked
                              ? '<div class="lock-icon"><i class="fas fa-lock"></i></div>'
                              : ""
                          }
                          <div class="module-content">
                            <h3 class="module-title">${module.nom}</h3>
                            <p class="module-description">${
                              module.description ||
                              "Aucune description disponible"
                            }</p>
                            <div class="module-status">
                              <div class="status-indicator">
                                <i class="fas ${
                                  moduleStatus.isLocked
                                    ? "fa-lock text-red-500"
                                    : moduleStatus.completed
                                    ? "fa-check-circle text-green-500"
                                    : "fa-circle text-gray-400"
                                }"></i>
                                <span>${
                                  moduleStatus.isLocked
                                    ? "Module verrouillé"
                                    : moduleStatus.completed
                                    ? "Complété"
                                    : "À compléter"
                                }</span>
                              </div>
                              ${
                                moduleStatus.isLocked
                                  ? `<div class="lock-message">${moduleStatus.message}</div>`
                                  : ""
                              }
                            </div>
                          </div>
                        </div>
                      `;
                    })
                    .join("")}
                </div>
              </div>
            `;

            // Ajouter les styles CSS
            const style = document.createElement("style");
            style.textContent = `
              .modules-container {
                max-width: 1400px;
                margin: 0 auto;
                padding: 2rem;
              }

              .modules-header {
                text-align: center;
                margin-bottom: 2rem;
              }

              .modules-grid {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
                gap: 2rem;
              }

              .module-card {
                position: relative;
                background: linear-gradient(145deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
                border-radius: 1.5rem;
                padding: 2rem;
                transition: all 0.4s ease;
                cursor: pointer;
                border: 1px solid rgba(255, 255, 255, 0.1);
                backdrop-filter: blur(10px);
                overflow: hidden;
              }

              .module-card:not(.locked):hover {
                transform: translateY(-8px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
                background: linear-gradient(145deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.08));
              }

              .module-card.locked {
                cursor: not-allowed;
                opacity: 0.7;
                filter: grayscale(0.5);
              }

              .module-card.locked:hover {
                animation: shake 0.5s ease-in-out;
              }

              .module-number {
                position: absolute;
                top: 1.5rem;
                left: 1.5rem;
                background: rgba(255, 255, 255, 0.1);
                padding: 0.25rem 0.75rem;
                border-radius: 1rem;
                font-size: 0.9rem;
                color: rgba(255, 255, 255, 0.8);
              }

              .lock-icon {
                position: absolute;
                top: 1.5rem;
                right: 1.5rem;
                font-size: 1.75rem;
                color: #ff4444;
                text-shadow: 0 0 10px rgba(255, 68, 68, 0.5);
              }

              .module-content {
                margin-top: 2rem;
              }

              .module-title {
                font-size: 1.5rem;
                color: white;
                margin-bottom: 1rem;
                font-weight: 600;
              }

              .module-description {
                color: rgba(255, 255, 255, 0.8);
                font-size: 1rem;
                line-height: 1.6;
                margin-bottom: 1.5rem;
                min-height: 3rem;
              }

              .module-status {
                margin-top: 1.5rem;
                padding-top: 1rem;
                border-top: 1px solid rgba(255, 255, 255, 0.1);
              }

              .status-indicator {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                font-size: 0.9rem;
                color: rgba(255, 255, 255, 0.7);
              }

              .lock-message {
                margin-top: 0.5rem;
                font-size: 0.85rem;
                color: #ff4444;
              }

              @keyframes shake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-8px); }
                75% { transform: translateX(8px); }
              }
            `;
            document.head.appendChild(style);

            // Mettre à jour les visuels des modules
            await ProgressTracker.updateModuleVisuals();

            // Réinitialisation de l'état
            ProgressTracker.state = {
              videoProgress: 0,
              readingTime: 0,
              quizScore: 0,
              conditions: {
                videoWatched: false,
                timeSpentReading: false,
                quizPassed: false,
              },
            };

            if (window.resetChapterProgress) {
              window.resetChapterProgress();
            }
            if (window.updateChapterInfo) {
              window.updateChapterInfo(name, null);
            }

            if (ProgressTracker.readingInterval) {
              clearInterval(ProgressTracker.readingInterval);
              ProgressTracker.readingInterval = null;
            }
          } catch (error) {
            console.error("Erreur lors du chargement:", error);
            UI.handleError(moduleList, error);
          }
        };

        // Fonction pour charger le contenu d'un module
        window.loadContent = async function (fId, mId, mName) {
          try {
            const contentDisplay = document.getElementById("contentDisplay");
            if (!contentDisplay) return;

            UI.showLoading(contentDisplay);
            contentDisplay.classList.remove("hidden");

            const moduleList = document.getElementById("moduleList");
            if (moduleList) moduleList.classList.add("hidden");

            currentModule = mName;
            window.currentModuleId = mId;
            window.currentFormationId = fId;
            window.currentFormation = currentFormation;

            // Initialiser l'état depuis le backend
            await ProgressTracker.initializeState(fId, mId);

            if (window.updateChapterInfo) {
              window.updateChapterInfo(currentFormation, mName);
            }

            updateBreadcrumb();

            const content = await ApiClient.getModuleContent(fId, mId);
            currentModuleContent = content;

            if (content.video) {
              await renderVideoContent(content, currentModule);
            } else {
              await renderTextContent(content, currentModule);
            }

            UI.updateProgressUI(ProgressTracker.state);
          } catch (error) {
            console.error("Erreur dans loadContent:", error);
            UI.handleError(contentDisplay, error);
          }
        };

        // Fonction pour le rendu du contenu vidéo
        async function renderVideoContent(content, currentModule) {
          const contentDisplay = document.getElementById("contentDisplay");
          let videoId = "";
          const videoUrl = content.video.trim();

          if (videoUrl.includes("youtube.com/watch")) {
            videoId = videoUrl.split("v=")[1]?.split("&")[0];
          } else if (videoUrl.includes("youtu.be")) {
            videoId = videoUrl.split("youtu.be/")[1]?.split("?")[0];
          }

          if (videoId) {
            contentDisplay.innerHTML = `
            <div class="content-header fade-in">
                <h2>Vidéo: ${currentModule}</h2>
            </div>
            <div class="content-body fade-in">
                <div class="video-container">
                    <iframe 
                        id="player"
                        src="https://www.youtube.com/embed/${videoId}?enablejsapi=1" 
                        frameborder="0" 
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                        allowfullscreen>
                    </iframe>
                </div>
            </div>`;

            const iframe = contentDisplay.querySelector("iframe");
            ProgressTracker.initializeVideoTracking(iframe);
          }
        }

        // Fonction pour le rendu du contenu textuel
        async function renderTextContent(content, currentModule) {
          const contentDisplay = document.getElementById("contentDisplay");
          contentDisplay.innerHTML = `
        <div class="content-header fade-in">
            <h2>${currentModule}</h2>
        </div>
        <div class="content-body fade-in">
            <p class="content-description">${content.description || ""}</p>
            <div class="module-content w-full">
                ${content.course || ""}
            </div>
            <button class="next-module-btn mt-4 px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
                    ${
                      !Object.values(ProgressTracker.state.conditions).every(
                        Boolean
                      )
                        ? "disabled"
                        : ""
                    }
                        onclick="loadModules('${
                          window.currentFormationId
                        }', '${currentFormation}')">
                Module Suivant
            </button>
        </div>`;

          ProgressTracker.startReadingTracking();
        }

        // Fonction pour mettre à jour le fil d'Ariane
        function updateBreadcrumb() {
          const breadcrumb = document.querySelector(".breadcrumb");
          if (!breadcrumb) return;

          let html = "";
          if (currentFormation) {
            html += `
                <span class="breadcrumb-item cursor-pointer" onclick="loadFormations()">
                    ${currentFormation}
                </span>`;

            if (currentModule) {
              html += `
                    <span class="breadcrumb-separator">
                        <i class="fas fa-chevron-right"></i>
                    </span>
                    <span class="breadcrumb-item">
                        ${currentModule}
                    </span>`;
            }
          }
          breadcrumb.innerHTML = html;
        }

        // Chargement initial
        loadFormations();
      });
    </script>
    <script src="https://www.youtube.com/iframe_api"></script>
  </body>
</html>
