<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Formations</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
      <link rel="stylesheet" href="/public/css/contenus.css">
  </head>
  <body>
    <nav class="navigation">
      <button class="nav-button" onclick="window.location.reload()">
        <i class="fas fa-home"></i> Accueil
      </button>
      <div class="breadcrumb"></div>
    </nav>

    <div class="container">
      <div id="formationList" class="hidden">
        <!-- Liste des formations -->
      </div>

      <div id="moduleList" class="hidden">
        <!-- Liste des modules -->
      </div>

      <div id="contentDisplay" class="hidden">
        <!-- Contenu -->
      </div>
    </div>
    <script>


      // API Client
      const ApiClient = {
        async fetchWithSecurity(url, options = {}) {
          try {
            const response = await fetch(url, {
              ...options,
              headers: {
                ...SecurityUtils.getHeaders(),
                ...options.headers,
              },
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.message || "Une erreur est survenue");
            }

            return await response.json();
          } catch (error) {
            console.error("API Error:", error);
            throw error;
          }
        },

        async getFormations() {
          return this.fetchWithSecurity("/formations");
        },

        async getFormation(id) {
          if (!SecurityUtils.validateId(id)) throw new Error("ID invalide");
          return this.fetchWithSecurity(`/formations/${id}`);
        },

        async getModules(formationId) {
          if (!SecurityUtils.validateId(formationId))
            throw new Error("ID invalide");
          return this.fetchWithSecurity(`/formations/${formationId}/modules`);
        },

        async saveProgress(formationId, moduleId, progressData) {
          if (
            !SecurityUtils.validateId(formationId) ||
            !SecurityUtils.validateId(moduleId)
          ) {
            throw new Error("ID invalide");
          }

          if (!RateLimiter.canPerformAction(`progress-${moduleId}`)) {
            return;
          }

          return this.fetchWithSecurity(
            `/formations/${formationId}/modules/${moduleId}/progress`,
            {
              method: "POST",
              body: JSON.stringify(progressData),
            }
          );
        },
      };

      // Progress Tracker
      const ProgressTracker = {
        state: {
          videoProgress: 0,
          readingTime: 0,
          quizScore: 0,
          conditions: {
            videoWatched: false,
            timeSpentReading: false,
            quizPassed: false,
          },
        },

        readingInterval: null,

        async saveProgress(type, value) {
          const validTypes = ["video", "quiz", "reading"];
          if (!validTypes.includes(type)) {
            throw new Error("Type de progression invalide");
          }

          if (
            typeof value !== "number" ||
            value < 0 ||
            (type === "video" && value > 100) ||
            (type === "quiz" && value > 100)
          ) {
            throw new Error("Valeur de progression invalide");
          }

          this.state[`${type}Progress`] = value;
          await ApiClient.saveProgress(
            window.currentFormationId,
            window.currentModuleId,
            {
              type,
              value,
            }
          );
        },

        startReadingTracking() {
          this.stopReadingTracking();

          const startTime = Date.now() - this.state.readingTime * 1000;
          this.readingInterval = setInterval(() => {
            this.state.readingTime = Math.floor(
              (Date.now() - startTime) / 1000
            );
            if (this.state.readingTime >= 180) {
              this.state.conditions.timeSpentReading = true;
              this.saveProgress("reading", this.state.readingTime);
            }
            UI.updateProgressUI(this.state);
          }, 1000);
        },

        stopReadingTracking() {
          if (this.readingInterval) {
            clearInterval(this.readingInterval);
            this.readingInterval = null;
          }
        },

        initializeVideoTracking(videoElement) {
          if (!videoElement?.src.includes("youtube")) return;

          return new YT.Player(videoElement, {
            events: {
              onStateChange: (event) => {
                if (event.data === YT.PlayerState.PLAYING) {
                  setInterval(() => {
                    const duration = player.getDuration();
                    const currentTime = player.getCurrentTime();
                    const progress = (currentTime / duration) * 100;

                    this.state.videoProgress = progress;
                    if (progress >= 70) {
                      this.state.conditions.videoWatched = true;
                      this.saveProgress("video", progress);
                    }
                    UI.updateProgressUI(this.state);
                  }, 1000);
                }
              },
            },
          });
        },
      };

      // UI Manager
      const UI = {
        elements: {
          contentDisplay: document.getElementById("contentDisplay"),
          moduleList: document.getElementById("moduleList"),
          formationList: document.getElementById("formationList"),
          breadcrumb: document.querySelector(".breadcrumb"),
          navbarHidden: document.getElementById("navbarHidden"),
        },

        showLoading(element) {
          if (!element) return;
          element.innerHTML = `
            <div class="loading-animation">
                <div class="spinner"></div>
            </div>
        `;
        },

        updateProgressUI(state) {
          const progressHtml = `
            <div class="progress-status mb-4 p-4 bg-gray-100 rounded-lg">
                <h3 class="font-bold mb-2">Progression du module</h3>
                <div class="grid gap-2">
                    <div class="flex items-center gap-2">
                        <i class="fas ${
                          state.conditions.videoWatched
                            ? "fa-check-circle text-green-500"
                            : "fa-circle text-gray-300"
                        }"></i>
                        <span>Vid√©o (${Math.round(
                          state.videoProgress
                        )}% / 70% requis)</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <i class="fas ${
                          state.conditions.timeSpentReading
                            ? "fa-check-circle text-green-500"
                            : "fa-circle text-gray-300"
                        }"></i>
                        <span>Lecture (${Math.floor(
                          state.readingTime / 60
                        )}:${String(state.readingTime % 60).padStart(
            2,
            "0"
          )} / 3:00)</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <i class="fas ${
                          state.conditions.quizPassed
                            ? "fa-check-circle text-green-500"
                            : "fa-circle text-gray-300"
                        }"></i>
                        <span>Quiz (${state.quizScore}% / 100% requis)</span>
                    </div>
                </div>
            </div>`;

          const contentHeader = document.querySelector(".content-header");
          if (contentHeader) {
            let progressStatus = document.querySelector(".progress-status");
            if (progressStatus) {
              progressStatus.remove();
            }
            contentHeader.insertAdjacentHTML("afterend", progressHtml);
          }
        },

        handleError(element, error) {
          if (!element) return;
          console.error("Error:", error);
          element.innerHTML = `
            <div class="error-message">
                <i class="fas fa-exclamation-circle"></i>
                <span>${SecurityUtils.escapeHtml(
                  error.message || "Une erreur est survenue"
                )}</span>
            </div>
        `;
        },
      };

      document.addEventListener("DOMContentLoaded", function () {
        // State management
        let currentFormation = null;
        let currentModule = null;
        let currentModuleContent = null;
        let formationId = null;
        let currentModuleId = null;

        // Ajout du state pour le suivi de la progression
        let moduleProgress = {
          videoProgress: 0,
          readingTime: 0,
          quizScore: 0,
          conditions: {
            videoWatched: false,
            timeSpentReading: false,
            quizPassed: false,
          },
        };
        let readingTimeInterval = null;

        // Configuration constantes
        const ContentTypes = {
          MODULE: "module",
          VIDEO: "video",
          COURSE: "course",
          QUIZ: "quiz",
        };

        // DOM Elements
        const navbarHidden = document.getElementById("navbarHidden");
        const mainContent = document.getElementById("mainContent");
        const videoLink = document.querySelector('a[href="/videos"]');
        const coursLink = document.querySelector('a[href="/cours"]');
        const quizLink = document.querySelector('a[href="/quiz"]');
        const nextLink = document.querySelector('a[href="/next"]');

        // Fonctions de suivi et de validation
        function updateProgressUI() {
          const progressHtml = `
      <div class="progress-status mb-4 p-4 bg-gray-100 rounded-lg">
        <h3 class="font-bold mb-2">Progression du module</h3>
        <div class="grid gap-2">
          <div class="flex items-center gap-2">
            <i class="fas ${
              moduleProgress.conditions.videoWatched
                ? "fa-check-circle text-green-500"
                : "fa-circle text-gray-300"
            }"></i>
            <span>Vid√©o (${Math.round(
              moduleProgress.videoProgress
            )}% / 70% requis)</span>
          </div>
          <div class="flex items-center gap-2">
            <i class="fas ${
              moduleProgress.conditions.timeSpentReading
                ? "fa-check-circle text-green-500"
                : "fa-circle text-gray-300"
            }"></i>
            <span>Lecture (${Math.floor(
              moduleProgress.readingTime / 60
            )}:${String(moduleProgress.readingTime % 60).padStart(
            2,
            "0"
          )} / 3:00)</span>
          </div>
          <div class="flex items-center gap-2">
            <i class="fas ${
              moduleProgress.conditions.quizPassed
                ? "fa-check-circle text-green-500"
                : "fa-circle text-gray-300"
            }"></i>
            <span>Quiz (${moduleProgress.quizScore}% / 100% requis)</span>
          </div>
        </div>
      </div>`;

          const contentHeader = document.querySelector(".content-header");
          if (contentHeader) {
            let progressStatus = document.querySelector(".progress-status");
            if (progressStatus) {
              progressStatus.remove();
            }
            contentHeader.insertAdjacentHTML("afterend", progressHtml);
          }

          // V√©rifier si toutes les conditions sont remplies
          const allConditionsMet = Object.values(
            moduleProgress.conditions
          ).every((condition) => condition);
          const completeBtn = document.querySelector(".complete-module-btn");
          if (completeBtn) {
            completeBtn.disabled = !allConditionsMet;
          }
        }

        function initializeVideoTracking(videoElement) {
          if (!videoElement) return;

          if (videoElement.src.includes("youtube")) {
            const player = new YT.Player(videoElement, {
              events: {
                onStateChange: function (event) {
                  if (event.data === YT.PlayerState.PLAYING) {
                    setInterval(() => {
                      const duration = player.getDuration();
                      const currentTime = player.getCurrentTime();
                      const progress = (currentTime / duration) * 100;

                      moduleProgress.videoProgress = progress;
                      if (progress >= 70) {
                        moduleProgress.conditions.videoWatched = true;
                      }
                      updateProgressUI();
                    }, 1000);
                  }
                },
              },
            });
          }
        }

        function startReadingTimeTracking() {
          if (readingTimeInterval) {
            clearInterval(readingTimeInterval);
          }

          const startTime = Date.now() - moduleProgress.readingTime * 1000;
          readingTimeInterval = setInterval(() => {
            moduleProgress.readingTime = Math.floor(
              (Date.now() - startTime) / 1000
            );
            if (moduleProgress.readingTime >= 180) {
              moduleProgress.conditions.timeSpentReading = true;
            }
            updateProgressUI();
          }, 1000);
        }

        function stopReadingTimeTracking() {
          if (readingTimeInterval) {
            clearInterval(readingTimeInterval);
          }
        }
        function updateBreadcrumb() {
          const breadcrumb = document.querySelector(".breadcrumb");
          if (!breadcrumb) return;

          let html = "";
          if (currentFormation) {
            html += `
        <span class="breadcrumb-item cursor-pointer" onclick="loadFormations()">
          ${currentFormation}
        </span>
      `;

            if (currentModule) {
              html += `
          <span class="breadcrumb-separator">
            <i class="fas fa-chevron-right"></i>
          </span>
          <span class="breadcrumb-item">
            ${currentModule}
          </span>
        `;
            }
          }
          breadcrumb.innerHTML = html;
        }

        function showLoading(element) {
          if (!element) return;
          element.innerHTML = `
      <div class="loading-animation">
        <div class="spinner"></div>
      </div>
    `;
        }

        window.loadFormations = function () {
          const formationList = document.getElementById("formationList");
          if (!formationList) return;

          showLoading(formationList);
          formationList.classList.remove("hidden");

          const moduleList = document.getElementById("moduleList");
          const contentDisplay = document.getElementById("contentDisplay");

          if (moduleList) moduleList.classList.add("hidden");
          if (contentDisplay) contentDisplay.classList.add("hidden");
          if (navbarHidden) navbarHidden.style.display = "none";

          currentFormation = null;
          currentModule = null;
          formationId = null;
          currentModuleId = null;
          updateBreadcrumb();

          fetch("/formations")
            .then((response) => {
              if (!response.ok)
                throw new Error("R√©ponse du serveur non valide");
              return response.json();
            })
            .then((data) => {
              if (!Array.isArray(data))
                throw new Error("Format de donn√©es invalide");

              formationList.innerHTML = data
                .map(
                  (formation) => `
          <div class="formation-item fade-in" onclick="loadFormationDescription('${formation._id}', '${formation.nom}')">
            <div class="icon-container">
              <i class="fas fa-graduation-cap"></i>
            </div>
            <div class="formation-content">
              <h3>${formation.nom}</h3>
            </div>
          </div>
        `
                )
                .join("");
            })
            .catch((error) => handleError(formationList, error));
        };

        window.loadFormationDescription = function (id, name) {
          const formationList = document.getElementById("formationList");
          if (!formationList) return;

          showLoading(formationList);
          currentFormation = name;
          formationId = id;
          updateBreadcrumb();

          fetch(`/formations/${id}`)
            .then((response) => {
              if (!response.ok)
                throw new Error(
                  "Erreur lors de la r√©cup√©ration de la formation"
                );
              return response.json();
            })
            .then((formation) => {
              formationList.innerHTML = `
          <div class="formation-item fade-in">
            <div class="icon-container">
              <i class="fas fa-graduation-cap"></i>
            </div>
            <div class="formation-content">
              <h3>${formation.nom}</h3>
              <p class="formation-description">${
                formation.description || "Aucune description disponible"
              }</p>
              <button class="btn-inscription" onclick="inscrireAFormation('${
                formation._id
              }', '${formation.nom}')">
                S'inscrire
              </button>
            </div>
          </div>
        `;
            })
            .catch((error) => handleError(formationList, error));
        };

        window.inscrireAFormation = function (id, name) {
          fetch(`/formations/${id}/inscription`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({}),
          })
            .then((response) => {
              if (!response.ok) {
                return response.json().then((err) => {
                  throw new Error(err.message);
                });
              }
              return response.json();
            })
            .then((data) => {
              alert(data.message);
              loadModules(id, name);
            })
            .catch((error) => {
              console.error("Erreur lors de l'inscription:", error);
              alert("Erreur lors de l'inscription : " + error.message);
            });
        };

        function updateProgressionUI(progression) {
          const moduleItems = document.querySelectorAll(".module-item");

          moduleItems.forEach((moduleItem) => {
            const moduleId = moduleItem.dataset.moduleId;
            const statusIcon = moduleItem.querySelector(".status-icon i");
            const quizScore = moduleItem.querySelector(".quiz-score");

            const moduleProgress = progression.find(
              (p) => p.moduleId === moduleId
            );

            if (moduleProgress) {
              // Update status icon
              if (moduleProgress.completed) {
                statusIcon.className = "fas fa-check-circle text-green-500";
                moduleItem.classList.add("completed");
              } else if (moduleProgress.locked) {
                statusIcon.className = "fas fa-lock text-red-500";
                moduleItem.classList.add("locked");
              }

              // Update quiz score if available
              if (moduleProgress.quizScore !== undefined) {
                quizScore.textContent = `Score: ${moduleProgress.quizScore}%`;
              }
            }
          });
        }
        window.loadModules = function (id, name) {
          console.log(`loadModules called with id: ${id}, name: ${name}`);

          const moduleList = document.getElementById("moduleList");
          if (!moduleList) {
            console.error("moduleList not found in the DOM");
            return;
          }

          console.log(
            "Afficher le chargement et configurer la liste des modules"
          );
          showLoading(moduleList);
          moduleList.classList.remove("hidden");

          const formationList = document.getElementById("formationList");
          if (formationList) {
            console.log("Masquer la liste des formations");
            formationList.classList.add("hidden");
          }

          currentFormation = name;
          formationId = id;
          currentModule = null;
          currentModuleId = null;
          console.log("Mise √† jour du breadcrumb");
          updateBreadcrumb();

          console.log(`Fetching modules for formation id: ${id}`);
          fetch(`/formations/${id}/modules`)
            .then((response) => {
              console.log(`Modules fetch response status: ${response.status}`);
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              return response.json();
            })
            .then((modules) => {
              console.log("Modules re√ßus:", modules);

              if (!Array.isArray(modules)) {
                throw new Error("Format de donn√©es invalide pour les modules");
              }

              moduleList.innerHTML = modules
                .map(
                  (module) => `
            <div class="module-item fade-in" 
                 data-module-id="${module._id}"
                 onclick="loadContent('${id}', '${module._id}', '${
                    module.nom
                  }')">
                <div class="icon-container">
                    <i class="fas fa-book"></i>
                </div>
                <div class="module-content">
                    <h3>${module.nom}</h3>
                    <p class="module-description">${
                      module.description || "Aucune description disponible"
                    }</p>
                    <div class="status-icon">
                        <i class="fas fa-circle"></i>
                    </div>
                    <div class="quiz-score"></div>
                </div>
            </div>`
                )
                .join("");

              console.log(`Modules affich√©s dans moduleList`);
              return fetch(`/formations/${id}/progression`);
            })
            .then((response) => {
              console.log(
                `Progression fetch response status: ${response.status}`
              );
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              return response.json();
            })
            .then((progression) => {
              console.log("Progression re√ßue:", progression);
              if (Array.isArray(progression)) {
                console.log("Mise √† jour de l'UI de progression");
                updateProgressionUI(progression);
              } else {
                console.warn(
                  "Progression re√ßue n'est pas un tableau:",
                  progression
                );
              }
            })
            .catch((error) => {
              console.error("Erreur lors du chargement:", error);
              if (!moduleList.innerHTML) {
                console.warn("Aucun contenu dans moduleList apr√®s erreur");
                handleError(moduleList, error);
              }
            });
        };

        // Modifiez uniquement la section loadContent dans votre script :

        window.loadContent = function (fId, mId, mName) {
          console.log(
            `loadContent called with fId: ${fId}, mId: ${mId}, mName: ${mName}`
          );

          const contentDisplay = document.getElementById("contentDisplay");
          if (!contentDisplay) {
            console.error("contentDisplay not found in the DOM");
            return;
          }

          showLoading(contentDisplay);
          contentDisplay.classList.remove("hidden");

          const moduleList = document.getElementById("moduleList");
          if (moduleList) moduleList.classList.add("hidden");

          currentModule = mName;
          currentModuleId = mId;
          formationId = fId;
          updateBreadcrumb();

          if (navbarHidden) navbarHidden.style.display = "block";

          moduleProgress = {
            videoProgress: 0,
            readingTime: 0,
            quizScore: 0,
            conditions: {
              videoWatched: false,
              timeSpentReading: false,
              quizPassed: false,
            },
          };

          Promise.all([
            fetch(`/formations/${fId}/modules/${mId}/content`).then((r) =>
              r.json()
            ),
            fetch(`/formations/${fId}/modules/${mId}/status`).then((r) =>
              r.json()
            ),
          ])
            .then(([data, status]) => {
              currentModuleContent = data;
              // Afficher directement la vid√©o si elle existe
              if (data.video) {
                let videoId = "";
                const videoUrl = data.video.trim();

                // Gestion des diff√©rents formats d'URL YouTube
                if (videoUrl.includes("youtube.com/watch")) {
                  videoId = videoUrl.split("v=")[1]?.split("&")[0];
                } else if (videoUrl.includes("youtu.be")) {
                  videoId = videoUrl.split("youtu.be/")[1]?.split("?")[0];
                }

                if (videoId) {
                  contentDisplay.innerHTML = `
            <div class="content-header fade-in">
                <h2>Vid√©o: ${currentModule}</h2>
            </div>
            <div class="content-body fade-in">
                <div class="video-container">
                    <iframe 
                        id="player"
                        src="https://www.youtube.com/embed/${videoId}?enablejsapi=1" 
                        frameborder="0" 
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                        allowfullscreen>
                    </iframe>
                </div>
            </div>`;

                  const iframe = contentDisplay.querySelector("iframe");
                  initializeVideoTracking(iframe);
                } else {
                  contentDisplay.innerHTML = `
            <div class="content-header fade-in">
                <h2>${currentModule}</h2>
            </div>
            <div class="content-body fade-in">
                <div class="error-message">
                    <p>Erreur: Format de vid√©o non valide</p>
                </div>
            </div>`;
                }
              } else {
                // Afficher le contenu normal si pas de vid√©o
                contentDisplay.innerHTML = `
          <div class="content-header fade-in">
            <h2>${currentModule}</h2>
          </div>
          <div class="content-body fade-in">
            <p class="content-description">${
              data.description || "Aucune description disponible"
            }</p>
            <div class="module-content w-full">
              ${data.course || ""}
            </div>
          </div>`;
              }

              updateProgressUI();
              if (!data.video) {
                startReadingTimeTracking();
              }
            })
            .catch((error) => handleError(contentDisplay, error));
        };

        window.renderQuizModal = function (quizData) {
          if (!Array.isArray(quizData)) {
            console.error("Format de quiz invalide");
            return;
          }

          const modalHtml = `
      <div id="quiz-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
          <div class="content-header">
            <h2>Quiz: ${currentModule}</h2>
          </div>
          <form id="quiz-form">
            ${quizData
              .map(
                (question, index) => `
              <div class="quiz-question mb-4 p-4 bg-gray-100 rounded-lg">
                <h3 class="font-bold mb-2">${question.question}</h3>
                <div class="quiz-options">
                  ${question.options
                    .map(
                      (option) => `
                    <label class="block mb-2">
                      <input type="radio" name="question-${index}" value="${option}" 
                        data-correct="${question.answer === option}"
                        required
                        class="mr-2 quiz-option">
                      ${option}
                    </label>
                  `
                    )
                    .join("")}
                </div>
              </div>
            `
              )
              .join("")}
            <div class="flex justify-between">
              <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                Soumettre le Quiz
              </button>
              <button type="button" onclick="closeQuizModal()" 
                class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400">
                Fermer
              </button>
            </div>
          </form>
          <div id="quiz-result" class="mt-4 text-center"></div>
        </div>
      </div>
    `;

          const existingModal = document.getElementById("quiz-modal");
          if (existingModal) {
            existingModal.remove();
          }

          document.body.insertAdjacentHTML("beforeend", modalHtml);

          const quizForm = document.getElementById("quiz-form");
          if (quizForm) {
            quizForm.addEventListener("submit", function (e) {
              e.preventDefault();
              const resultDiv = document.getElementById("quiz-result");
              if (!resultDiv) return;

              let correctAnswers = 0;
              const totalQuestions = quizData.length;

              const radioGroups = document.querySelectorAll(
                'input[type="radio"]:checked'
              );
              if (radioGroups.length !== totalQuestions) {
                alert("Veuillez r√©pondre √† toutes les questions");
                return;
              }

              radioGroups.forEach((radio) => {
                if (radio.getAttribute("data-correct") === "true") {
                  correctAnswers++;
                }
              });

              const score = Math.round((correctAnswers / totalQuestions) * 100);
              moduleProgress.quizScore = score;
              moduleProgress.conditions.quizPassed = score === 100;

              resultDiv.innerHTML = `
          <p class="font-bold text-lg">
            Votre score : ${correctAnswers}/${totalQuestions} (${score}%)
          </p>
          <p class="${score === 100 ? "text-green-600" : "text-red-600"}">
            ${
              score === 100
                ? "F√©licitations ! Quiz r√©ussi !"
                : "Vous devez obtenir 100% pour valider le module"
            }
          </p>
        `;

              updateProgressUI();
            });
          }
        };

        // Event Listeners pour la navigation
        if (videoLink) {
          videoLink.addEventListener("click", function (e) {
            e.preventDefault();

            // V√©rification que le contenu du module actuel contient une vid√©o
            if (
              !currentModuleContent ||
              !currentModuleContent.video ||
              !currentModuleContent.video.trim()
            ) {
              alert("Aucune vid√©o disponible pour ce module");
              return;
            }

            const contentDisplay = document.getElementById("contentDisplay");
            if (!contentDisplay) return;

            // Arr√™ter le suivi du temps de lecture actuel
            stopReadingTimeTracking();

            const videoUrl = currentModuleContent.video.trim();
            let videoIframe = "";

            // Gestion des URL YouTube et raccourcis youtu.be
            if (
              videoUrl.includes("youtube.com/watch") ||
              videoUrl.includes("youtu.be")
            ) {
              let videoId = "";

              if (videoUrl.includes("youtube.com/watch")) {
                videoId = videoUrl.split("v=")[1]?.split("&")[0]; // Extraction de l'ID vid√©o
              } else if (videoUrl.includes("youtu.be")) {
                videoId = videoUrl.split("youtu.be/")[1]?.split("?")[0];
              }

              if (videoId) {
                videoIframe = `<iframe 
                         src="https://www.youtube.com/embed/${videoId}?enablejsapi=1" 
                         frameborder="0" 
                         allow="autoplay; encrypted-media; picture-in-picture" 
                         allowfullscreen>
                       </iframe>`;
              } else {
                videoIframe = "ID vid√©o introuvable. Lien YouTube incorrect.";
              }
            } else {
              videoIframe = "Format de vid√©o non support√©.";
            }

            // Mise √† jour du contenu de la div d'affichage
            contentDisplay.innerHTML = `
      <div class="content-header fade-in">
        <h2>Vid√©o: ${currentModule}</h2>
      </div>
      <div class="content-body fade-in">
        <div class="video-container">
          ${videoIframe}
        </div>
      </div>
    `;

            // Initialisation du suivi vid√©o si un iframe est pr√©sent
            const iframe = contentDisplay.querySelector("iframe");
            if (iframe) {
              initializeVideoTracking(iframe);
            }
          });
        }

        if (coursLink) {
          coursLink.addEventListener("click", function (e) {
            e.preventDefault();
            if (!currentModuleContent) return;

            const contentDisplay = document.getElementById("contentDisplay");
            if (!contentDisplay) return;

            contentDisplay.innerHTML = `
        <div class="content-header fade-in">
          <h2>Cours: ${currentModule}</h2>
        </div>
        <div class="content-body fade-in">
          <div class="course-container">
            ${
              currentModuleContent.cours ||
              currentModuleContent.description ||
              "Aucun cours disponible"
            }
          </div>
        </div>
      `;

            stopReadingTimeTracking();
            startReadingTimeTracking();
            updateProgressUI();
          });
        }

        if (quizLink) {
          quizLink.addEventListener("click", function (e) {
            e.preventDefault();
            if (!currentModuleContent || !currentModuleContent.quiz) {
              alert("Aucun quiz disponible pour ce module");
              return;
            }
            stopReadingTimeTracking();
            renderQuizModal(currentModuleContent.quiz);
          });
        }

        if (nextLink) {
          nextLink.addEventListener("click", function (e) {
            e.preventDefault();
            stopReadingTimeTracking();

            if (!formationId) {
              alert("Veuillez s√©lectionner une formation");
              return;
            }

            const moduleList = document.getElementById("moduleList");
            if (!moduleList) return;

            showLoading(moduleList);
            moduleList.classList.remove("hidden");

            const contentDisplay = document.getElementById("contentDisplay");
            if (contentDisplay) contentDisplay.classList.add("hidden");

            // Utilisation de Promise.all comme dans loadModules pour charger modules et progression
            Promise.all([
              fetch(`/formations/${formationId}/modules`).then((response) => {
                if (!response.ok)
                  throw new Error(`HTTP error! status: ${response.status}`);
                return response.json();
              }),
              fetch(`/formations/${formationId}/progression`).then(
                (response) => {
                  if (!response.ok)
                    throw new Error(`HTTP error! status: ${response.status}`);
                  return response.json();
                }
              ),
            ])
              .then(([modules, progression]) => {
                if (!Array.isArray(modules)) {
                  throw new Error(
                    "Format de donn√©es invalide pour les modules"
                  );
                }

                moduleList.innerHTML = modules
                  .map(
                    (module) => `
            <div class="module-item fade-in" 
                 data-module-id="${module._id}"
                 onclick="loadContent('${formationId}', '${module._id}', '${
                      module.nom
                    }')"
            >
                <div class="icon-container">
                    <i class="fas fa-book"></i>
                </div>
                <div class="module-content">
                    <h3>${module.nom}</h3>
                    <p class="module-description">${
                      module.description || "Aucune description disponible"
                    }</p>
                    <div class="status-icon">
                        <i class="fas fa-circle"></i>
                    </div>
                    <div class="quiz-score"></div>
                </div>
            </div>
          `
                  )
                  .join("");

                // Mise √† jour de l'UI avec la progression
                if (Array.isArray(progression)) {
                  updateProgressionUI(progression);
                } else {
                  console.log(
                    "Progression re√ßue n'est pas un tableau:",
                    progression
                  );
                }
              })
              .catch((error) => {
                console.error("Erreur lors du chargement:", error);
                handleError(moduleList, error);
              });
          });
        }

        window.closeQuizModal = function () {
          const modal = document.getElementById("quiz-modal");
          if (modal) {
            modal.remove();
          }
        };

        function handleError(element, error) {
          if (!element) return;
          console.error("Erreur:", error);
          element.innerHTML = `
      <div class="error-message">
        <i class="fas fa-exclamation-circle"></i>
        <span>${error.message || "Une erreur est survenue"}</span>
      </div>
    `;
        }

        // Chargement initial
        loadFormations();
      });
    </script>
    <script type="module">
      import { SecurityUtils, RateLimiter } from './security_contenus';

    </script>
  </body>
</html>
