<!-- views/partials/connectedList.ejs -->
<div class="bg-gray-800 bg-opacity-50 h-full w-full flex flex-col">
  <h2 class="text-sm font-semibold text-white p-2 flex items-center flex-none border-b border-gray-700">
    <i class="fas fa-users text-sm mr-2"></i>
    Utilisateurs connectés
  </h2>
  <div id="connectedUsersList" class="flex-1 overflow-y-auto p-2 space-y-2">
    <!-- Users will be dynamically inserted here -->
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const socket = io();
  const connectedUsersList = document.getElementById('connectedUsersList');
  let allUsers = new Map();
  
  const currentUser = {
    userId: '<%= user._id %>',
    username: '<%= user.username %>',
    avatar: '<%= user.avatar %>' // Ajout de l'avatar de l'utilisateur courant
  };

  socket.emit('user-connect', {
    userId: currentUser.userId,
    username: currentUser.username,
    avatar: currentUser.avatar, // Envoi de l'avatar au serveur
    room: 'general'
  });

  socket.on('users-update', (users) => {
    mergeUsers(users);
  });

  socket.on('user-connected', (data) => {
    if (data.users) {
      mergeUsers(data.users);
    }
  });

  socket.on('user-disconnected', (data) => {
    if (data.users) {
      mergeUsers(data.users);
    }
  });

  function mergeUsers(users) {
    if (!Array.isArray(users)) return;
    
    // Garder une copie des avatars existants
    const existingAvatars = new Map();
    allUsers.forEach((user, id) => {
      if (user.avatar && user.avatar !== '/images/default-profile.svg') {
        existingAvatars.set(id, user.avatar);
      }
    });

    allUsers = new Map();

    users.forEach(user => {
      if (user && user.id) {
        // Restaurer l'avatar existant si disponible
        const existingAvatar = existingAvatars.get(user.id);
        if (existingAvatar) {
          user.avatar = existingAvatar;
        }
        allUsers.set(user.id, user);
      }
    });

    // S'assurer que l'utilisateur courant est toujours présent avec son avatar
    if (!allUsers.has(currentUser.userId)) {
      allUsers.set(currentUser.userId, {
        id: currentUser.userId,
        username: currentUser.username,
        avatar: currentUser.avatar || '/images/default-profile.svg'
      });
    } else {
      // Mettre à jour l'avatar de l'utilisateur courant si nécessaire
      const currentUserInList = allUsers.get(currentUser.userId);
      if (currentUser.avatar && currentUser.avatar !== '/images/default-profile.svg') {
        currentUserInList.avatar = currentUser.avatar;
      }
    }

    renderUsersList();
  }

  function renderUsersList() {
    try {
      const sortedUsers = Array.from(allUsers.values()).sort((a, b) => {
        if (a.id === currentUser.userId) return -1;
        if (b.id === currentUser.userId) return 1;
        return a.username.localeCompare(b.username);
      });

      connectedUsersList.innerHTML = sortedUsers.map(user => `
        <div class="flex items-center space-x-2 p-1.5 rounded-lg ${
          user.id === currentUser.userId 
            ? 'bg-gray-600 bg-opacity-70 border-l-2 border-blue-500' 
            : 'bg-gray-700 bg-opacity-50'
        }">
          <div class="relative flex-shrink-0">
            <img 
              src="${user.avatar || '/images/default-profile.svg'}" 
              alt="${user.username}" 
              class="w-8 h-8 rounded-full object-cover"
              onerror="this.src='/images/default-profile.svg'"
            >
            <span class="absolute bottom-0 right-0 w-2 h-2 bg-green-500 border border-gray-800 rounded-full"></span>
          </div>
          <div class="min-w-0 flex-1">
            <p class="text-white text-xs font-medium truncate">
              ${user.id === currentUser.userId ? `${user.username} (vous)` : user.username}
            </p>
            <p class="text-gray-300 text-xs truncate">En ligne</p>
          </div>
        </div>
      `).join('');
    } catch (error) {
      console.error('Error rendering users list:', error);
    }
  }

  socket.on('connect_error', (error) => {
    console.error('Connection error:', error);
  });

  socket.on('error', (error) => {
    console.error('Socket error:', error);
  });

  socket.on('connect', () => {
    console.log('Connected to server');
  });

  setInterval(() => {
    if (socket.connected) {
      socket.emit('heartbeat');
    }
  }, 30000);
});
</script>