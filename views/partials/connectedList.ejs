<!-- views/partials/connectedList.ejs -->
<div class="bg-gray-800 bg-opacity-50 p-4 rounded-lg h-full">
  <h2 class="text-xl font-semibold text-white mb-4 flex items-center">
    <i class="fas fa-users mr-2"></i>
    Utilisateurs connect√©s
  </h2>
  <div id="connectedUsersList" class="space-y-3 overflow-y-auto max-h-[calc(100%-4rem)]">
    <!-- Users will be dynamically inserted here -->
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const socket = io();
  const connectedUsersList = document.getElementById('connectedUsersList');
  let allUsers = new Map(); // Store all users with their unique IDs
  
  const currentUser = {
    userId: '<%= user._id %>',
    username: '<%= user.username %>'
  };

  // Connect to socket with user information
  socket.emit('user-connect', {
    userId: currentUser.userId,
    username: currentUser.username,
    room: 'general'
  });

  // Update users list when receiving updates
  socket.on('users-update', (users) => {
    mergeUsers(users);
  });

  socket.on('user-connected', (data) => {
    if (data.users) {
      mergeUsers(data.users);
    }
  });

  socket.on('user-disconnected', (data) => {
    if (data.users) {
      mergeUsers(data.users);
    }
  });

  // Function to merge and maintain user list
  function mergeUsers(users) {
    if (!Array.isArray(users)) return;

    // Clear disconnected users
    allUsers = new Map();

    // Add or update users
    users.forEach(user => {
      if (user && user.id) {
        allUsers.set(user.id, user);
      }
    });

    // Add current user if not present
    if (!allUsers.has(currentUser.userId)) {
      allUsers.set(currentUser.userId, {
        id: currentUser.userId,
        username: currentUser.username,
        avatar: '/images/default-profile.svg'
      });
    }

    renderUsersList();
  }

  // Function to render the users list
  function renderUsersList() {
    try {
      const usersArray = Array.from(allUsers.values());
      connectedUsersList.innerHTML = usersArray.map(user => `
        <div class="flex items-center space-x-3 p-2 rounded-lg bg-gray-700 bg-opacity-50 ${
          user.id === currentUser.userId ? 'border-l-4 border-blue-500' : ''
        }">
          <div class="relative">
            <img 
              src="${user.avatar || '/images/default-profile.svg'}" 
              alt="${user.username}" 
              class="w-10 h-10 rounded-full"
              onerror="this.src='/images/default-profile.svg'"
            >
            <span class="absolute bottom-0 right-0 w-3 h-3 bg-green-500 border-2 border-gray-800 rounded-full"></span>
          </div>
          <div>
            <p class="text-white font-medium">
              ${user.id === currentUser.userId ? `${user.username} (vous)` : user.username}
            </p>
            <p class="text-gray-300 text-sm">En ligne</p>
          </div>
        </div>
      `).join('');
    } catch (error) {
      console.error('Error rendering users list:', error);
    }
  }

  // Gestion des erreurs et maintenance de la connexion
  socket.on('connect_error', (error) => {
    console.error('Connection error:', error);
  });

  socket.on('error', (error) => {
    console.error('Socket error:', error);
  });

  socket.on('connect', () => {
    console.log('Connected to server');
  });

  // Heartbeat pour maintenir la connexion
  setInterval(() => {
    if (socket.connected) {
      socket.emit('heartbeat');
    }
  }, 30000);
});
</script>